class IDTree:
    def __init__(self, adj_dict: dict[int, list[int]]) -> None: ...
    def py_clone(self) -> "IDTree": ...
    def insert_edge(self, u: int, v: int) -> int: ...
    def delete_edge(self, u: int, v: int) -> int: ...
    def query(self, u: int, v: int) -> bool: ...
    def cycle_basis(self, root: int | None) -> list[list[int]]: ...
    def node_connected_component(self, v: int) -> list[int]: ...
    def num_connected_components(self) -> int: ...
    def active_nodes(self) -> list[int]: ...
    def isolate_node(self, v: int) -> None: ...
    def isolate_nodes(self, nodes: list[int]) -> None: ...
    def is_isolated(self, v: int) -> bool: ...
    def degree(self, v: int) -> int: ...
    def neighbors(self, v: int) -> list[int]: ...
    def retain_active_nodes_from(self, v: int, from_indices: list[int]) -> list[int]: ...
    def find(self, v: int) -> int: ...

class NodeRouter:
    def __init__(self, exploration_json: str) -> None: ...
    def py_solve_for_terminal_pairs(self, terminal_pairs: list[tuple[int, int]]) -> list[int]: ...
